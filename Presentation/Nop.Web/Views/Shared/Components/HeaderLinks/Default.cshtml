@model HeaderLinksModel
@inject Nop.Core.IWebHelper webHelper

<div class="top_nav">
    <div class="container">
        <div class="row">
            @*<div class="col-md-6">

            </div>*@
                <div class="text-right">
                    <div class="top_nav_right">



                        @if (Model.IsAuthenticated)
                        {
                        <div class="top_nav_menu1">
                            <div class="currency"> @await Component.InvokeAsync("AdminHeaderLinks") </div>
                            <div class="language"><a href="@Url.RouteUrl("CustomerInfo")"> <i class="fa fa-user" aria-hidden="true"></i></a> </div>
                            <div class="account"><a href="@Url.RouteUrl("Logout")">@T("Account.Logout")</a> </div>
                            <div class="account"><a href="@Url.RouteUrl("ContactUs")">CONTACT</a> </div>
                        </div>
                          
                            @*<div class="account">
                <a href="@Url.RouteUrl("ShoppingCart")">
                    <i class="fa fa-shopping-cart" aria-hidden="true"></i>
                    <span id="checkout_items" class="checkout_items">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </div>*@
                        }
                        else
                        {
                            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                            ? url.ToString()
                            : webHelper.GetRawUrl(Context.Request);
                    <div class="top_nav_menu">
                        <div class="language">
                            @*<button onclick="myFunction()" class="dropbtn"> MY ACCOUNT <i class="fa fa-angle-down"></i></button>
            <div id="myDropdown" class="dropdown-content">*@
                            <a href="/corporatecustomer/register/" class="ico-register"> <i class="fa fa-sign-in" aria-hidden="true"></i> @T("Account.Register")</a>
                        </div>
                        <div class="language">
                            <a href="@Url.RouteUrl("Login")" class="ico-login"> <i class="fa fa-user-plus" aria-hidden="true"></i> @T("Account.Login")</a>
                        </div>
                        <div class="language"><a href="@Url.RouteUrl("ContactUs")">CONTACT</a> </div>
                    </div>
    
                                @*<div class="account">
                    <a href="@Url.RouteUrl("ShoppingCart")">
                        <i class="faab fa-shopping-cart" aria-hidden="true"></i>
                        <span id="checkout_items" class="checkout_items">@Model.ShoppingCartItems</span>
                    </a>
                </div>*@
                                }


                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
                            </div>
                        </div>
            
            </div>
        </div>
</div>
@if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
{
    //new private message notification
    <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
    </script>
}

@*<script asp-location="Footer">
    /* When the user clicks on the button,
    toggle between hiding and showing the dropdown content */
    function myFunction() {
        document.getElementById("myDropdown").classList.toggle("show");
    }

    // Close the dropdown if the user clicks outside of it
    window.onclick = function (event) {
        if (!event.target.matches('.dropbtn')) {
            var dropdowns = document.getElementsByClassName("dropdown-content");
            var i;
            for (i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                }
            }
        }
    }
</script>*@
